# unixy
alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias c="cat"
alias gr="grep"
alias ls="ls -F"
alias lsd="find . -type d -depth 1"
alias l="ls -Al"
alias ll="ls -AGl"
alias ln="ln -v"
alias m="mail -f /var/mail/$(whoami)"
alias tjf="tar -jxvf"
alias tlf="tail -f"
alias top="top -o cpu -O vsize"
alias tophistory="history | awk '{a[$2]++}END{for(i in a){print a[i] \' \' i}}' | sort -rn | head" # https://coderwall.com/p/o5qijw
alias tzf="tar -zxvf"
      until_fail() { while [ "$(echo $?)" -eq "0" ]; do $@; done }
# todo: alias wtf= look for something like /filename:## in last output and edit it
# $ screencapture -o - | ocr? and try to find "wtf" and then look around what's above and to the right? for a filename(:#|"line")

# mac-y
      battery() { ioreg -n AppleSmartBattery -r | awk '$1~/Capacity/{c[$1]=$3} END{OFMT="%.0f%%"; max=c["\"MaxCapacity\""]; print (max>0? 100*c["\"CurrentCapacity\""]/max: "?")}' }
alias b="brew"
alias nv="nvim"
alias tac="tail -r"

# rails
function rc {
  FLAGS=""
  if [[ -z "$(gem list pry | grep pry-rails)" ]]; then
    FLAGS="--irb=$(which pry)"
  fi

  if [ -e script/rails ]; then
    script/rails console $FLAGS $@
  elif [ -e bin/rails ]; then
    bin/rails console $FLAGS $@
  else
    script/console --irb=$(which pry) $@
  fi
}
function rs {
  if [ -e script/rails ]; then
    script/rails server $@
  elif [ -e bin/rails ]; then
    bin/rails server $@
  else
    script/server $@
  fi
}
alias rss="rescue rails server"

# rake
alias brake="bundle exec rake"
alias bx="bundle exec"
alias r="rake" # overrides zsh's builtin shortcut but who cares
alias rT="rake -T"
alias rdm="rake db:migrate db:test:prepare"
alias rdmp="rake db:migrate db:test:prepare parallel:prepare"
alias rj="rake jasmine"
alias rjc="rake jasmine:ci"
alias rps="rake parallel:spec"

# git
alias gA="git add -A"
alias gap="git add -p"
alias gb="git branch --color"
alias gbb="git branch-name"
alias gcm="git commit -m"
alias gcompare="git show-branch \$([[ -e .git ]] && git rev-parse --abbrev-ref HEAD) origin/\$([[ -e .git ]] && git rev-parse --abbrev-ref HEAD)"
alias gcv="git commit -v"
alias gcav="git commit -av"
alias gcAv="git commit -Av"
alias gd="git diff --color-words='[^[:space:]]|([[:alnum:]]|UTF_8_GUARD)+'."
      gdiff() {
        $FIRST=$1
        $SECOND=$2
        $FILE=$3
        diff <(git show :$FIRST:$FILE) <(git show :$SECOND:$FILE)
      }
alias gds="gd --staged"
alias gh="git config --get remote.origin.url | sed -e 's/\/\///' -e 's/git.//' -e 's/:/\//' -e 's/\.git//' -e 's/^/http:\/\//' | xargs open"
alias gl="git lg"
alias gm="git mergetool"
alias gp="git pull"
alias gpr="gcompare && git pull --rebase"
alias grhH="git reset --hard HEAD"
alias gs="git status --short"

# bundle
alias bindle="bundle install"

# rspec
alias rspec="rspec -c"

# dev-y
alias ack="echo don\'t you mean $ ag"
alias again="~ && -" # so rvm reloads your .ruby-version file
      branch() { SEARCHTERM=$1; git branch | grep $SEARCHTERM | sed -e 's/^\* //' | awk '{ if (NR==1 || $1 == searchterm) result = $1 } END{ if (result) { print result } else { exit 1 } }' searchterm=$SEARCHTERM }
      catenv() { [ -r .env ] && env $(cat .env | xargs) $@ }
alias clj="java -cp ~/.m2/repository/org/clojure/clojure/1.5.1/clojure-1.5.1.jar clojure.main"
alias deploy_heroku="rspec && git push heroku master"
alias dps="docker ps"
alias eautotest="ls {lib,web}/**/*.ex test/**/*.exs | entr mix test"
alias irb="echo how about pry"
alias h="heroku"
alias hdn="heroku ps:scale web=0"
alias hup="heroku ps:scale web=1"
alias ism="iex -S mix"
alias jn="jasmine-node"
alias jnc="jn --coffee"
alias jsw="jekyll serve --watch"
alias local_node="heroku ps:scale web=0 && npm start; heroku ps:scale web=1"
alias meb="mix escript.build"
alias nw="/Applications/node-webkit.app/Contents/MacOS/node-webkit"
alias rr="if [[ -e ./tmp/restart.txt ]]; then touch ./tmp/restart.txt && echo Restarted server; else echo No ./tmp/restart.txt?; fi"
alias start_postgres="pg_ctl -D /usr/local/var/postgres -l /usr/local/var/postgres/server.log start"
alias us="bundle exec unicorn -c tmp/unicorn.rb"
